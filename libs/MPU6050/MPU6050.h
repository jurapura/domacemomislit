/* Library for basic abstraction of some features implemented in MPU6050 sensor via
I2C communication */

// Header file define
#ifndef _MPU6050_H_
#define _MPU6050_H_

// I2C abstraction library
#include "I2Clib.h"
#include "Arduino.h"

// Register map

#define MPU6050_ADD         0x68 // sensor I2C address

/**
 * 8-bit unsigned value. The Sample rate is determined by dividing the gyroscope
 * output rate by this value.
 *
 * The sensor register output, FIFO output, DMP sampling and Motion detection are all
 * based on the Sample Rate.
 *
 * The Sample Rate is generated by dividing the gyroscope output rate by SMPRT_DIV.
 *
 * Sample Rate = Gyro Out Rate / (1 + SMPRT_DIV)
 *
 * Where Gyro Out Rate = 8kHz when DLPF is OFF and 1kHz when DLPF is ON.
 *
 * Accelerometers output rate is 1kHz. This means that for a Sample Rate
 * greater than 1kHz, the same accelerometer sample may be output to the
 * FIFO, DMP, and sensor registers more than once.
 *
 * **NOTE TO SELF**: sample rate is rate at which you can read the registers. Gyro Out
 * Rate is its internal output rate.
 */
#define MPU6050_SMPLRT_DIV 0x19

/**
 * This register configures the Digital Low Pass Filter (DLPF) setting for both the
 * gyroscopes and accelerometers.
 *
 * The DLPF is configured by bits [2:0]. Sensors are filtered according to the table:
 * <value>      <acc_setting>       <gyro_setting>
 *     0        260Hz               256Hz
 *     1        184Hz               188Hz
 *     2        94Hz                98Hz
 *     3        44Hz                42Hz
 *     4        21Hz                20Hz
 *     5        10Hz                10Hz
 *     6        5Hz                 5Hz
 *     7        -                   -
 */
#define MPU6050_CONFIG 0x1A // R/W

/**
 * Gyroscope configuration register
 * 2-bit unsigned value. Selects the full range of gyroscopes.
 * bits [4:3]
 *
 * value    range
 * 0        ± 250 °/s
 * 1        ± 500 °/s
 * 2        ± 1000 °/s
 * 3        ± 2000 °/s
 */
#define MPU6050_GYRO_CONFIG 0x1B // R/W

/**
 * Accelerometer configuration register
 * 2-bit unsigned value. Selects the full scale range of accelerometers.
 * bits [4:3]
 *
 * value    range
 * 0        ± 2g
 * 1        ± 4g
 * 2        ± 8g
 * 3        ± 16g
 */
#define MPU6050_ACCEL_CONFIG 0x1C // R/W

/**
 * Bypass enable configuration register
 * bit [2]
 *
 * Set to 1 so host application processor can directly access auxiliary I2C bus of the
 * MPU6050 to which the HMC5883L is connected to.
 */
#define MPU6050_INT_PIN_CFG 0x37 // R/W

/**
 * These registers store the most recent accelerometer measurements.
 *
 * value    range   sensitivity
 * 0        ±2g     16384 LSB/g
 * 1        ±4g     8192 LSB/g
 * 2        ±8g     4096 LSB/g
 * 3        ±16g    2048 LSB/g
 *
 * 16-bit 2’s complement value
 */
#define MPU6050_ACCEL_XOUT_H 0x3B // R
#define MPU6050_ACCEL_XOUT_L 0x3C // R
#define MPU6050_ACCEL_YOUT_H 0x3D // R
#define MPU6050_ACCEL_YOUT_L 0x3E // R
#define MPU6050_ACCEL_ZOUT_H 0x3F // R
#define MPU6050_ACCEL_ZOUT_L 0x40 // R

/**
 * These registers store the most recent temperature sensor measurement.
 * The temperature in degrees C for a given register value may be computed as:
 * Temp in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53
 *
 * >>math in the above equation is in decimal<<
 *
 * 16-bit signed value
 */
#define MPU6050_TEMP_OUT_H 0x41 // R
#define MPU6050_TEMP_OUT_L 0x42 // R

/**
 * These registers store the most recent gyroscope measurements.
 * value    range       sensitivity
 * 0        ±250°/s     131 LSB/°/s
 * 1        ±500°/s     65.5 LSB/°/s
 * 2        ±1000°/s    32.8 LSB/°/s
 * 3        ±2000°/s    16.4 LSB/°/s
 *
 * 16-bit 2’s complement value
 */
#define MPU6050_GYRO_XOUT_H 0x43 // R
#define MPU6050_GYRO_XOUT_L 0x44 // R
#define MPU6050_GYRO_YOUT_H 0x45 // R
#define MPU6050_GYRO_YOUT_L 0x46 // R
#define MPU6050_GYRO_ZOUT_H 0x47 // R
#define MPU6050_GYRO_ZOUT_L 0x48 // R

/**
 * This register is used to reset the analog and digital signal paths
 * of the gyroscope, accelerometer, and temperature sensors.
 *
 * bit[0] -- TEMP_RESET
 * bit[1] -- ACCEL_RESET
 * bit[2] -- GYRO_RESET
 *
 * bits[3:7] -- reserved
 *
 * When set to 1, resets the sensor signal paths
 */
#define MPU6050_SINGAL_PATH_RESET 0x68 // W

/**
 * bit[5] -- I2C_MST_EN -- set to 0, auxiliary I2C bus lines are
 * logically driven by the primary I2C.
 *
 * bit[0] -- SIG_COND_RESET -- when set to 1, resets the signal paths for all sensors
 * and clears the sensor registers. Clears to 0 after triggered reset.
 */
#define MPU6050_USER_CTRL 0x6A // R/W

/**
 * This register allows the user to configure the power mode and clock source.
 * It also provides a bit for resetting the entire device,
 * and a bit for disabling the temperature sensor.
 *
 * bit[7] -- DEVICE_RESET -- when set to 1, resets all internal registers to their
 *                           default values.
 *
 * bit[6] -- SLEEP -- by setting SLEEP to 1, MPU6050 enters low power sleep mode
 */
#define MPU6050_PWR_MGMT_1 0x6B // R/W

/**
 * This register is used to verify the identity of the device.
 *
 * bits[6:1] -- WHO_AM_I -- Power-On-Reset value is 110100
 *
 * bit[7] and bit[0] are hard-coded to 0.
 *
 * Default register value is 0x68
 */
#define MPU6050_WHO_AM_I 0x75 // R


class MPU6050
{
public:
	MPU6050();

	void init();

    bool setSampleRateDiv(uint8_t value);
    uint8_t getSampleRateDiv();

    bool setDLPF(uint8_t value);
    uint8_t getDLPF();

    bool setGyroConfig(uint8_t value);
    uint8_t getGyroConfig();

    bool setAccelConfig(uint8_t value);
    uint8_t getAccelConfig();

    void getAcceleration(int16_t* x, int16_t* y, int16_t* z);

    int16_t getTemperature();

    void getRotationRate(int16_t* x, int16_t* y, int16_t* z);

    void getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz);

    void resetSensors();

    void resetDevice();

	bool testConnection();

private:
    uint8_t buffer[14];

};

#endif // _MPU6050_H_
